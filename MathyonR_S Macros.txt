Macro_Name_Syntax,Scope,Purpose_LLM,Arguments_LLM,Returns_Effect_LLM,Example_LLM,Notes_LLM,Original_File_Source
"3 (Integer Literal)",Mathyon General,Represents a literal integer value.,N/A (Literal Value),Integer: The integer itself.,`<mathyon> x = 3; </mathyon>`,For direct use of integer numbers.,Mathyon macros
"3.14 (Float Literal)",Mathyon General,Represents a literal floating-point number.,N/A (Literal Value),Number: The floating-point number itself.,`<mathyon> y = 3.14; </mathyon>`,For direct use of decimal numbers.,Mathyon macros
"-3 (Negative Literal)",Mathyon General,Represents a literal negative number.,N/A (Literal Value),Number: The negative number itself.,`<mathyon> z = -3; </mathyon>`,For direct use of negative numbers.,Mathyon macros
"pi (Constant)",Mathyon General,Represents the mathematical constant pi (π).,N/A (Constant),Number: The value of pi.,`<mathyon> circ = 2*pi*r; </mathyon>`,Approximation of π.,Mathyon macros
"Exp (Constant)",Mathyon General,Represents the mathematical constant e (Euler's number).,N/A (Constant),Number: The value of e.,`<mathyon> growth = Exp^t; </mathyon>`,Approximation of e.,Mathyon macros
"Im (Constant)",Mathyon General,Represents the imaginary unit i (sqrt(-1)).,N/A (Constant),ComplexNumber: The imaginary unit.,`<mathyon> z = 3 + 2*Im; </mathyon>`,Used for complex number representation.,Mathyon macros
"infinity (Constant)",Mathyon General,Represents positive infinity (∞).,N/A (Constant),Infinity: Positive infinity.,`limit(x, infinity, 1/x)`,Used in limits and interval notation.,Mathyon macros
"-infinity (Constant)",Mathyon General,Represents negative infinity (-∞).,N/A (Constant),Infinity: Negative infinity.,`limit(x, -infinity, x^2)`,Used in limits and interval notation.,Mathyon macros
"x (Variable)",Mathyon General,"Displays unassigned variables as written; substitutes assigned variables for their value.",variable_name (Identifier): The name of the variable.,Varies: The variable's symbol or its assigned value.,`<mathyon> x=5; </mathyon> In text: <mi>x</mi> => 5. If unassigned: <mi>x</mi> => x.`,Fundamental for dynamic content.,Mathyon macros
"x_1 (Subscripted Variable)",Mathyon General,Represents variables with subscripts (e.g., x₁).,variable_name_index (Identifier): Variable name with underscore and index.,Varies: The subscripted variable's symbol or value if assigned.,`<mathyon> x_1=10; </mathyon> In text: <mi>x_1</mi> => 10.`,Used for sequences, multiple related values.,Mathyon macros
"theta (Greek Variable)",Mathyon General,"Displays certain variable names (like 'theta') as their corresponding Greek symbols (e.g., θ).",greek_variable_name (Identifier): Specific variable names like 'alpha', 'beta', 'theta' etc.,Symbol: The Greek symbol if name matches, otherwise as written.,`<mathyon> theta=pi/2; </mathyon> In text: <mi>theta</mi> => θ.`,For standard mathematical notation.,Mathyon macros
"f (User-defined function symbol)",Mathyon General,"Displays declared user-defined functions in symbol form (e.g., f). Must be declared first via MathyonR `function.declare()`.",function_name (Identifier): Name of the declared function.,Symbol: The function symbol.,`function.declare(f,x);` In text: <mi>f</mi>,For representing functions abstractly after declaration.,Mathyon macros
"f(x) (User-defined function call)",Mathyon General,"Displays declared user-defined functions in function form (e.g., f(x)). Must be declared first via MathyonR `function.declare()`.",function_name(argument) (FunctionCall): Function name and its argument(s).,Expression: The function call notation.,`function.declare(f,x); function.equals(f, x^2);` In text: <mi>f(x)</mi>,For representing functions with arguments after declaration.,Mathyon macros
"a + 2 (Addition)",Mathyon General,Performs addition operation.,operand1 (Number/Expr): Left operand; operand2 (Number/Expr): Right operand.,Number/Expr: Sum of operands.,`<mathyon> sum_val = a+2; </mathyon>`,Basic arithmetic.,Mathyon macros
"a - 2 (Subtraction)",Mathyon General,Performs subtraction operation.,operand1 (Number/Expr): Left operand; operand2 (Number/Expr): Right operand.,Number/Expr: Difference of operands.,`<mathyon> diff_val = a-2; </mathyon>`,Basic arithmetic.,Mathyon macros
"a [+-] 2 (Plus Minus)",Mathyon General,"Represents the plus-minus symbol (±), often used in quadratic solutions or tolerances.",operand1 (Number/Expr): Value before ±; operand2 (Number/Expr): Value after ±.,SymbolicExpr: Expression with ± symbol for display.,`x = (-b [+-] sqrt(delta))/(2*a)`,Displays plus-minus notation. Not for calculation directly.,Mathyon macros
"a*2 (Implicit Multiplication)",Mathyon General,"Performs multiplication. Explicit '*' is often safer between variables or complex terms.",operand1 (Number/Expr): Multiplicand; operand2 (Number/Expr): Multiplier.,Number/Expr: Product of operands.,`<mathyon> prod = a*2; </mathyon> (Note: `2a` might also work but `a*b` is clearer than `ab`),Basic arithmetic. Explicit `*` or `[x]` recommended for clarity.,Mathyon macros
"a [x] 2 (Explicit Multiplication)",Mathyon General,"Performs explicit multiplication, displaying the '×' symbol.",operand1 (Number/Expr): Multiplicand; operand2 (Number/Expr): Multiplier.,SymbolicExpr: Expression with '×' symbol for display.,`<mathyon> area_display = l [x] w; </mathyon>`,Displays multiplication with '×' symbol. Not for calculation directly if different from `*`.,Mathyon macros
"a/2 (Implicit Division)",Mathyon General,"Performs division, typically displayed as a fraction.",numerator (Number/Expr): Dividend; denominator (Number/Expr): Divisor.,Number/Expr/Fraction: Quotient of operands.,`<mathyon> frac_val = a/2; </mathyon>`,Basic arithmetic, often renders as fraction.,Mathyon macros
"a [/] 2 (Explicit Division)",Mathyon General,"Performs explicit division, displaying the '÷' symbol.",numerator (Number/Expr): Dividend; denominator (Number/Expr): Divisor.,SymbolicExpr: Expression with '÷' symbol for display.,`<mathyon> ratio_display = a [/] 2; </mathyon>`,Displays division with '÷' symbol. Not for calculation directly if different from `/`.,Mathyon macros
"a^2 (Exponent)",Mathyon General,Raises a base to a power.,base (Number/Expr): The base; exponent (Number/Expr): The power.,Number/Expr: Result of exponentiation.,`<mathyon> squared_val = a^2; </mathyon>`,Standard power notation.,Mathyon macros
"a**2 (Exponent - alternative)",Mathyon General,Alternative syntax for raising a base to a power.,base (Number/Expr): The base; exponent (Number/Expr): The power.,Number/Expr: Result of exponentiation.,`<mathyon> squared_alt = a**2; </mathyon>`,Alternative power notation, same as `^`.,Mathyon macros
"a**(b + 2) (Exponent with parentheses)",Mathyon General,Exponentiation where the exponent is an expression; parentheses ensure correct order of operations.,base (Number/Expr): The base; expression (MathExpr): The exponent expression.,Number/Expr: Result of exponentiation.,`<mathyon> power_expr = a**(b+2); </mathyon>`,Ensures complex exponents are evaluated correctly.,Mathyon macros
"(a+1)*(a+2) (Grouped Multiplication)",Mathyon General,"Multiplication of grouped expressions. Multiplication operator is always required between terms.",group1 (MathExpr): First expression; group2 (MathExpr): Second expression.,Number/Expr: Product of the evaluated groups.,`<mathyon> product_groups = (a+1)*(a+2); </mathyon>`,CRITICAL: Multiplication is NEVER implied between parentheses; `*` or `[x]` is required.,Mathyon macros
"{a+1} (Forced Parentheses Display)",Mathyon General,"Forces the display of parentheses around an expression, even if not strictly needed by order of operations.",expression (MathExpr): The expression to enclose.,SymbolicExpr: The expression displayed within parentheses.,`{-b}/(2*a)` to ensure `-b` is clear for display.,Useful for visual grouping or emphasis in display.,Mathyon macros
"x = 1 (Equality)",Mathyon General,"Represents an equality relation or assertion for display or in logical contexts. For assignment in MathyonS, use `variable = value` syntax.",lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicEq: Represents the equality statement.,Display: `Solution is x = 1`. Answer checking (MathyonR): `equation.add_solution(x=1)`. Distinguish from MathyonS assignment.,Mathyon macros
"x == 1 (Equality - alternative)",Mathyon General,"Alternative syntax for an equality relation. For assignment in MathyonS, use `variable = value` syntax.",lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicEq: Represents the equality statement.,Display: `x == 1`. Answer checking (MathyonR): `equation.add_solution(x==1)`. Distinguish from MathyonS assignment.,Mathyon macros
"x > 1 (Greater Than)",Mathyon General,Represents a 'greater than' inequality for display or logical contexts.,lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicIneq: Represents the inequality.,Display: `x > 1`. Used in conditions or displaying relations.,Mathyon macros
"x >= 1 (Greater Than or Equal To)",Mathyon General,Represents a 'greater than or equal to' inequality for display or logical contexts.,lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicIneq: Represents the inequality.,Display: `x >= 1`. Used in conditions or displaying relations.,Mathyon macros
"x < 1 (Less Than)",Mathyon General,Represents a 'less than' inequality for display or logical contexts.,lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicIneq: Represents the inequality.,Display: `x < 1`. Used in conditions or displaying relations.,Mathyon macros
"x <= 1 (Less Than or Equal To)",Mathyon General,Represents a 'less than or equal to' inequality for display or logical contexts.,lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicIneq: Represents the inequality.,Display: `x <= 1`. Used in conditions or displaying relations.,Mathyon macros
"x != 1 (Not Equal To)",Mathyon General,Represents a 'not equal to' inequality for display or logical contexts.,lhs (MathExpr): Left-hand side; rhs (MathExpr): Right-hand side.,Boolean/SymbolicIneq: Represents the inequality.,Display: `x != 1`. Used in conditions or displaying relations.,Mathyon macros
"0 < x <= 1 (Sandwich Inequality)",Mathyon General,"Represents a compound inequality, where x is between two values, for display or logical contexts.",lower_bound (MathExpr): Lower bound; variable (MathExpr): Middle expression; upper_bound (MathExpr): Upper bound.,Boolean/SymbolicIneq: Represents the compound inequality.,Display: `0 < x <= 1`. Standard mathematical notation.,Mathyon macros
"N(expr)",Mathyon General,Numerically simplifies a given mathematical expression to its simplest numerical form by evaluation.,expr (MathExpr): The expression to simplify (e.g., `x+x`, `2*3+1`).,Number: The simplified numerical result.,`<mathyon> x=2; result = N(x*3+1); </mathyon> => `result` is 7.`,CRITICAL WARNING: Rounds float results to 4 decimal places. AVOID for precise float calculations; use `fixeddec()` for controlled float rounding.,Mathyon macros
"EN(expr_with_indices)",Mathyon General,Expands terms within an expression, often involving powers of sums (e.g., binomial expansion).,expr (MathExpr): Expression with indices/powers to expand, e.g., `(x+1)^2`.,MathExpr: The expression with terms expanded (e.g., `x^2 + 2x + 1`).,`<mathyon> expanded = EN((x+1)^2); </mathyon> => `expanded` becomes `x^2+2x+1`.`,Useful for polynomial expansion.,Mathyon macros
"refine(expr)",Mathyon General,"Improves visual clarity of an expression by removing double negatives, powers of 1, etc., without changing its value.",expr (MathExpr): The expression to refine.,MathExpr: The refined expression for display.,`refine(--2)` => `2`. `refine(x^1)` => `x`.,General expression cleanup for display.,Mathyon macros
"cancel_zeroes(expr_with_addition)",Mathyon General,Simplifies an addition expression for display by removing terms that evaluate to 0.,expr (MathExpr): An addition expression (e.g., `x+0+5`).,MathExpr: Expression with zero terms removed (e.g., `x+5`).,`cancel_zeroes(x+0+5)` => `x+5` (for display).,Simplifies additive expressions for display.,Mathyon macros
"expand_sums(expr)",Mathyon General,Expands an expression to show its additive terms, particularly after `EN` for expressions like `(a+b)^n`.,expr (MathExpr): Expression to expand into sum terms (e.g., result of `EN((x+2*y)^2)`).,MathExpr: Expression displayed as a sum of terms.,`expand_sums(EN((x+2*y)^2))` => `x^2+4xy+4y^2`. (Assumes EN produces an intermediate form that expand_sums makes fully additive).,Breaks down expressions into sums for display.,Mathyon macros
"root(value [, index])",Mathyon General,Calculates the n-th root of a value. Defaults to square root if index is omitted.,value (Number/Expr): The radicand; index (Int, Optional): The root index (e.g., 3 for cube root). Default is 2.,Number: The principal n-th root.,`root(64, 3)` => 4. `root(64)` => 8.,`sqrt(value)` is an alias for `root(value, 2)` or `root(value)`.,Mathyon macros
"sqrt(value)",Mathyon General,Calculates the square root of a value. Alias for `root(value)`.,value (Number/Expr): The radicand.,Number: The principal square root.,`sqrt(25)` => 5.,Alias for `root(value, 2)` or `root(value)`.,Mathyon macros
"log(value, base)",Mathyon General,Calculates the logarithm of a value to a specified base.,value (Number/Expr): The number to find the log of; base (Number/Expr): The logarithm base.,Number: The logarithm result.,`log(100, 10)` => 2.,Standard logarithm function.,Mathyon macros
"ln(value)",Mathyon General,Calculates the natural logarithm (base e) of a value.,value (Number/Expr): The number to find the natural log of.,Number: The natural logarithm result.,`ln(Exp)` => 1. `ln(Exp^2)` => 2.,Logarithm base e.,Mathyon macros
"min(val1, val2, ...)",Mathyon General,Returns the minimum value from a list of numbers or expressions.,val1, val2,... (Number/Expr): Comma-separated list of values.,Number: The minimum value found.,`min(1, 5, -2, 8)` => -2.,Finds smallest value.,Mathyon macros
"max(val1, val2, ...)",Mathyon General,Returns the maximum value from a list of numbers or expressions.,val1, val2,... (Number/Expr): Comma-separated list of values.,Number: The maximum value found.,`max(1, 5, -2, 8)` => 8.,Finds largest value.,Mathyon macros
"floor(value)",Mathyon General,Returns the largest integer less than or equal to the given value (rounds down).,value (Number/Expr): The value to floor.,Integer: The largest integer <= value.,`floor(3.14)` => 3. `floor(-2.7)` => -3.,Standard floor function.,Mathyon macros
"ceiling(value)",Mathyon General,Returns the smallest integer greater than or equal to the given value (rounds up).,value (Number/Expr): The value to ceil.,Integer: The smallest integer >= value.,`ceiling(3.14)` => 4. `ceiling(-2.7)` => -2.,Standard ceiling function.,Mathyon macros
"abs(value)",Mathyon General,Returns the absolute value (magnitude) of a number.,value (Number/Expr): The input number.,Number: The absolute value (always non-negative).,`abs(-5)` => 5. `abs(3)` => 3.,Calculates |value|.,Mathyon macros
"factorial(n)",Mathyon General,Calculates the factorial of a non-negative integer n (n!).,n (Int): Non-negative integer.,Integer: n * (n-1) * ... * 1. `factorial(0)` is 1.,`factorial(5)` => 120.,Standard factorial function.,Mathyon macros
"expand_factorial(n)",Mathyon General,Displays the factorial of n as an expanded product string.,n (Int): Non-negative integer.,String: Expanded product (e.g., "3 x 2 x 1") for display.,`expand_factorial(3)` => "3 x 2 x 1" (for display).,Shows the factorial calculation steps for display.,Mathyon macros
"mod(a, b)",Mathyon General,"Calculates the remainder of the division of a by b (a modulo b).",a (Int/Expr): Dividend; b (Int/Expr): Divisor.,Integer: The remainder (a % b).,`mod(7, 3)` => 1. `mod(6,4)` => 2.,Modulo operator.,Mathyon macros
"hcf(n1, n2, ...)",Mathyon General,"Returns the Highest Common Factor (HCF) or Greatest Common Divisor (GCD) of a list of integers.",n1, n2,... (Int): Comma-separated list of integers.,Integer: The HCF of the integers.,`hcf(12, 18, 30)` => 6.,Finds largest common divisor.,Mathyon macros
"lcm(n1, n2, ...)",Mathyon General,"Returns the Lowest Common Multiple (LCM) of a list of integers.",n1, n2,... (Int): Comma-separated list of integers.,Integer: The LCM of the integers.,`lcm(4, 6, 8)` => 24.,Finds smallest common multiple.,Mathyon macros
"percentage(value)",Mathyon General,"Represents 'value' as a percentage. Numerically, its value is `input_value / 100`. For display, it shows `input_value%`.",value (Number/Expr): The number or expression representing the percentage amount (e.g., 50 for 50%, 2*x for (2x)%).,Number: The numerical value (`input_value / 100`).,Display: `percentage(50)` shows "50%", numerical value 0.5. `N(percentage(2*x))` is `x/50` (from (2x)/100), displays `(2x)%`.,Used for calculations and display of percentages. `value` is the percentage number, not the decimal equivalent.,Mathyon macros
"func(f, x)",Mathyon General,Represents a function f with argument x for display. May be similar to `f(x)` syntax but for purely symbolic representation without prior declaration needs.,f (Identifier): Function name; x (Identifier/Expr): Argument.,SymbolicExpr: Represents f(x) for display.,`func(sin, theta)` displays as `sin(θ)`. `func(myUndefinedFunc, z)` displays `myUndefinedFunc(z)`.,Symbolic function display, less formal than declared functions.,Mathyon macros
"fraction(num_expr [, den_expr])",Mathyon General,"Simplifies a given fraction. If one arg, assumes it's a pre-formed fraction expression (e.g. `x/(2x)`). If two, they are numerator & denominator.",num_expr (Number/Expr): Numerator or full fraction expression; den_expr (Number/Expr, optional): Denominator.,Fraction: A simplified fraction object for display and calculation.,`fraction(4,8)` => 1/2. `fraction( (2*x)/(4*x) )` => 1/2.,Simplifies and displays fractions.,Mathyon macros
"ifraction(numerator, denominator)",Mathyon General,"Simplifies given numerator and denominator to an improper fraction (e.g., 7/3).",numerator (Number/Expr): The numerator; denominator (Number/Expr): The denominator.,Fraction: Simplified improper fraction.,`ifraction(150,100)` => 3/2. `ifraction(7,3)` => 7/3.,Ensures fraction is improper after simplification.,Mathyon macros
"makefraction(numerator, denominator)",Mathyon General,"Simplifies given numerator and denominator to a mixed fraction if improper, otherwise a proper fraction.",numerator (Number/Expr): The numerator; denominator (Number/Expr): The denominator.,Fraction/MixedFraction: Simplified (mixed) fraction.,`makefraction(150,100)` => 1 1/2. `makefraction(2,3)` => 2/3.,Converts to mixed or proper fraction after simplification.,Mathyon macros
"mixedfraction(integer_part, fraction_part)",Mathyon General,"Creates a mixed fraction from an integer part and a fractional part (e.g., 2 and 1/3). Input fraction_part is like 'num/den' or a fraction object.",integer_part (Int/Expr): The whole number part; fraction_part (Fraction/Expr): The fractional part (e.g., `1/3` or `fraction(1,3)`).,MixedFraction: The combined mixed fraction.,`mixedfraction(2, 1/3)` => 2 1/3. `mixedfraction(2, fraction(1,3))` => 2 1/3.,Constructs mixed fractions.,Mathyon macros
"ratio(val1, val2, ...)",Mathyon General,"Combines inputs into a ratio display (e.g., 1:2:3).",val1, val2,... (Number/Expr): Values for the ratio.,RatioString: String representing the ratio for display.,`ratio(1,2,3)` => "1:2:3".,Displays values as a ratio.,Mathyon macros
"ratiosimplify(ratio_expr)",Mathyon General,"Simplifies a given ratio or an expression containing a ratio (e.g., simplifies 150:100 to 3:2).",ratio_expr (RatioString/Expr): The ratio to simplify (e.g., `ratio(150,100)` or an expression that evaluates to a ratio).,RatioString: Simplified ratio string for display.,`ratiosimplify(ratio(150,100))` => "3:2".,Simplifies ratios to lowest terms for display.,Mathyon macros
"fixeddec(value, n_places)",Mathyon General,"Rounds 'value' to 'n_places' decimal places using Round Half Up. Pads with zeros if needed for display.",value (Number/Expr): Value to round; n_places (Int): Number of decimal places.,FormattedNumber: Number rounded to n_places, as a string or formatted number, for display and answer checking.,`fixeddec(2/3, 2)` => "0.67". `fixeddec(1.2, 3)` => "1.200".,Crucial for specific rounding and display of decimals. Matches student inputs rounded similarly.,Mathyon macros
"truncating_dec(value, n_places)",Mathyon General,"Rounds 'value' to 'n_places' (Round Half Up), then removes any trailing zeros from the decimal part.",value (Number/Expr): Value to round; n_places (Int): Number of decimal places.,FormattedNumber: Number rounded, trailing zeros removed, for display.,`truncating_dec(0.20, 2)` => "0.2". `truncating_dec(2/3,2)` => "0.67". `truncating_dec(1.200,3)` => "1.2".,Rounds then removes trailing zeros, for display.,Mathyon macros
"precise_dec(fraction_val)",Mathyon General,"Converts a fraction to an exact decimal if it can be represented within 4 decimal places, otherwise may return the fraction or original form.",fraction_val (Fraction/Expr): Fraction to convert.,Number/Fraction: Exact decimal if possible within 4 d.p., or original form.,`precise_dec(1/8)` => 0.125. `precise_dec(1/3)` likely stays 1/3 or similar non-terminating representation.,Converts simple fractions to terminating decimals if short.,Mathyon macros
"recurring_dec(value, n_repeating_digits)",Mathyon General,"Displays a number as a recurring decimal, with an overline over the last 'n_repeating_digits' of its decimal part.",value (Number/String): The decimal number (e.g., 0.23453 or "0.23453"); n_repeating_digits (Int): Number of digits from the end of decimal part to overline.,FormattedString: Number with recurring notation (e.g., 0.23(453) with overline).,`recurring_dec(0.23453, 3)` => 0.23(453) (with overline on 453).,Formats decimals with recurring part notation for display.,Mathyon macros
"round(value)",Mathyon General,"Rounds 'value' to the nearest integer using Round Half to Even (e.g., 2.5 => 2, 3.5 => 4).",value (Number/Expr): Value to round.,Integer: Value rounded to nearest integer, with .5 ties going to the nearest even integer.,`round(2/3)` => 1. `round(2.5)` => 2. `round(3.5)` => 4.,Rounds to nearest int; specific tie-breaking for .5 cases.,Mathyon macros
"roundup(value, n_places)",Mathyon General,"Rounds 'value' to 'n_places' decimal places, always rounding up (ceiling at that decimal place).",value (Number/Expr): Value to round; n_places (Int): Number of decimal places.,FormattedNumber: Number rounded up, for display or calculation.,`roundup(1/7, 3)` (0.1428...) => "0.143". `roundup(1.23,1)` => "1.3".,Always rounds away from zero at specified digit.,Mathyon macros
"rounddown(value, n_places)",Mathyon General,"Rounds 'value' to 'n_places' decimal places, always rounding down (floor at that decimal place).",value (Number/Expr): Value to round; n_places (Int): Number of decimal places.,FormattedNumber: Number rounded down, for display or calculation.,`rounddown(1/7, 3)` (0.1428...) => "0.142". `rounddown(1.28,1)` => "1.2".,Always rounds towards zero at specified digit.,Mathyon macros
"intervalvalue(lower, precise, upper)" or "intervalvalue(precise_value)",Mathyon General,"Generates rounding equivalence for answer checking. Accepts values within [lower, upper] or within ±1 of last decimal place of precise_value if only one arg is used.",lower (Number, optional): Lower bound; precise (Number): Exact answer; upper (Number, optional): Upper bound. OR precise_value (Number): Value to create interval around (if single arg).,EquivalenceRule: Configures answer checking for a numerical range in final answer steps.,`intervalvalue(3.14, pi, 22/7)`. `intervalvalue(0.125)` (same as `iv(1/8)`) implies e.g. [0.124, 0.126] if 1/8=0.125.,Used in final answer steps for numerical tolerance. `iv()` is shorthand.,Mathyon macros
"iv(...)",Mathyon General,Shorthand for `intervalvalue(...)`.,(Same as intervalvalue): See `intervalvalue` arguments.,EquivalenceRule: (Same as intervalvalue).,`iv(0.125)` or `iv(3.14,pi,22/7)`.,Shorthand for `intervalvalue()` for answer checking tolerance.,Mathyon macros
"word(number)",Mathyon General,Converts an integer into its English word representation.,number (Int): The integer to convert.,String: English words for the number.,`word(12)` => "twelve". `word(123)` => "one hundred and twenty-three".,Number to text conversion for display.,Mathyon macros
"roman(number)",Mathyon General,Converts an integer into its Roman numeral representation.,number (Int): The integer to convert (typically 1-3999).,String: Roman numeral string.,`roman(12)` => "XII". `roman(1994)` => "MCMXCIV".,Number to Roman numeral for display.,Mathyon macros
"monthname(month_num)",Mathyon General,Returns the English name of the month given its number (1-12).,month_num (Int): Month number (1=Jan, ..., 12=Dec).,String: Name of the month.,`monthname(1)` => "January". `monthname(12)` => "December".,Integer to month name for display.,Mathyon macros
"rand_female_name(count)",MathyonS,Returns a specified number of unique random female names.,count (Int): Number of unique female names to return.,List<String>: A list of female names.,`<mathyon> names_list = rand_female_name(2); </mathyon>`,Used for randomizing names in word problems.,MathyonR_S
"rand_male_name(count)",MathyonS,Returns a specified number of unique random male names.,count (Int): Number of unique male names to return.,List<String>: A list of male names.,`<mathyon> names_list = rand_male_name(1); </mathyon>`,Used for randomizing names in word problems.,MathyonR_S
"dayname(day_num)",Mathyon General,Returns the English name of the day of the week (1-7). Convention for day 1 (Sun/Mon) needs system context.,day_num (Int): Day number (e.g., 1=Sunday or Monday, up to 7).,String: Name of the day.,`dayname(1)` (assuming 1=Sunday) => "Sunday".,Integer to day name for display.,Mathyon macros
"daysinmonth(month_num [, year_or_is_leap])",Mathyon General,"Returns number of days in a given month. Can account for leap year if second arg provided (year as number, or 1 for leap).",month_num (Int): Month number (1-12); year_or_is_leap (Int/Bool, Optional): Year (e.g., 2024) or a flag (1 for leap, 0 for common).,Integer: Number of days in that month.,`daysinmonth(2)` (common year) => 28. `daysinmonth(2, 1)` or `daysinmonth(2,2024)` => 29.,Calculates days in a specific month.,Mathyon macros
"currency(symbol_or_unit, value)",Mathyon General,"Formats a numerical value as currency, with specified symbol or unit (e.g., '$', 'cents').",symbol_or_unit (String): Currency symbol (e.g., '$', '€') or unit ('cents', 'pounds'); value (Number/Expr): The monetary value.,FormattedString: Value displayed as currency.,`currency('$', 50)` => "$50.00" (or similar). `currency('cents', 50)` => "50c" (or similar).,Currency formatting for display. Precision depends on system settings for unit.,Mathyon macros
"currency_word(symbol_or_unit, value)",Mathyon General,"Returns the currency unit word (e.g., 'dollar', 'dollars', 'cent', 'cents') based on the value for correct pluralization.",symbol_or_unit (String): Currency unit ('$', 'cents', etc.); value (Number/Expr): The monetary value to determine singular/plural.,String: Singular or plural currency word.,`currency_word('$', 1)` => "dollar". `currency_word('$', 2)` => "dollars".,Handles pluralization of currency words for display.,Mathyon macros
"list(item1, item2, ...)",Mathyon General,Creates an ordered collection (a list) from the provided arguments.,item1, item2,... (AnyType): Comma-separated items for the list.,List: An ordered list object containing the items.,`<mathyon> data = list(1, 'a', x+2); </mathyon>`,Fundamental for creating ordered data structures.,Mathyon macros
"set(item1, item2, ...)",Mathyon General,"Creates an unordered collection (a set) of unique elements from the provided arguments. For single element set: `{item1,}` (trailing comma required).",item1, item2,... (AnyType): Comma-separated items for the set. Duplicates are ignored.,Set: An unordered set object with unique items.,`<mathyon> unique_items = set(1,2,2,3); </mathyon> => `{1,2,3}`. `{1,}` for single element.,Fundamental for unordered unique collections. Nested sets NOT supported.,Mathyon macros
"coord(x_val, y_val)",Mathyon General,"Represents a 2D coordinate pair (x, y) for display or use in plot macros. NOTE: For plot macros needing point objects, use `plot.point()` instead of `coord()`.",x_val (Number/Expr): The x-coordinate; y_val (Number/Expr): The y-coordinate.,CoordinateObject/String: Represents the coordinate, e.g., (x,y).,`coord(1,2)` => (1,2). Display or simple data. Plot functions require `plot.point()` objects.,Standard coordinate representation. Not a plottable object itself for functions needing `plot.point()`.,Mathyon macros
"intersection(setA, setB, ...)",Mathyon General,"Returns the intersection of two or more sets (elements common to all sets).",setA, setB,... (Set): Comma-separated set objects (e.g., `set(1,2)`).,Set: A new set containing common elements.,`intersection(set(1,2,3), set(2,3,4))` => `{2,3}`.,Set intersection. WARNING: Original docs mention potential display issues.,Mathyon macros
"union(setA, setB, ...)",Mathyon General,"Returns the union of two or more sets (all unique elements from all sets).",setA, setB,... (Set): Comma-separated set objects.,Set: A new set containing all unique elements.,`union(set(1,2), set(2,3,4))` => `{1,2,3,4}`.,Set union. WARNING: Original docs mention potential display issues.,Mathyon macros
"length(collection)",Mathyon General,"Returns the number of items in a collection (list, set, possibly string).",collection (List/Set/String): The collection to measure.,Integer: Number of items in the collection.,`length(list(1,2,3))` => 3. `length(set(1,2,2))` => 2.,Counts elements in a collection.,Mathyon macros
"reverse(list_val)",Mathyon General,Reverses the order of elements in a list.,list_val (List): The list to reverse.,List: A new list with elements in reverse order.,`reverse(list(1,2,3))` => `[3,2,1]`.,Reorders list elements.,Mathyon macros
"sort(list_val)",Mathyon General,"Sorts the elements of a list, typically in ascending order. Elements should be comparable.",list_val (List): The list to sort. Elements should be comparable (e.g., all numbers).,List: A new list with elements sorted.,`sort(list(3,1,2))` => `[1,2,3]`.,Orders list elements.,Mathyon macros
"concat(list1, list2, ...)",Mathyon General,Concatenates (joins) two or more lists into a single new list.,list1, list2,... (List): Comma-separated lists to join.,List: A new list containing all elements from input lists in order.,`concat(list(1,2), list(3,4))` => `[1,2,3,4]`.,Combines multiple lists.,Mathyon macros
"sum(collection)",Mathyon General,"Calculates the sum of numerical elements in a collection (typically a list or set).",collection (List<Number>/Set<Number>): Collection of numbers to sum.,Number: The sum of the elements.,`sum(list(1,2,3,4))` => 10.,Adds up elements in a collection.,Mathyon macros
"and(condition1, condition2, ...)",Mathyon General,"Represents a logical AND operation between conditions for display purposes. Displays as '... and ...'.",condition1, condition2,... (Boolean/Expr): Logical conditions.,SymbolicLogicExpr: String like "cond1 and cond2" for display.,`and(x>0, x<5)` => "x>0 and x<5". Used for display of compound conditions.,Logical AND for display, not direct boolean evaluation in all contexts.,Mathyon macros
"or(condition1, condition2, ...)",Mathyon General,"Represents a logical OR operation between conditions for display purposes. Displays as '... or ...'.",condition1, condition2,... (Boolean/Expr): Logical conditions.,SymbolicLogicExpr: String like "cond1 or cond2" for display.,`or(x<0, x>5)` => "x<0 or x<5". Used for display of compound conditions.,Logical OR for display, not direct boolean evaluation in all contexts.,Mathyon macros
"sin(angle_expr)",Mathyon General,Calculates the trigonometric sine of an angle. Angle unit (degrees/radians) inferred or specified using `degrees()` or `radians()` macros.,angle_expr (Number/AngleExpr): Angle value, e.g., `degrees(30)` or `pi/6`.,Number: Sine of the angle.,`sin(degrees(30))` => 0.5. `sin(pi/6)` => 0.5.,Trigonometric sine function.,Mathyon macros
"cos(angle_expr)",Mathyon General,Calculates the trigonometric cosine of an angle. Angle unit inferred/specified.,angle_expr (Number/AngleExpr): Angle value.,Number: Cosine of the angle.,`cos(degrees(60))` => 0.5. `cos(pi/3)` => 0.5.,Trigonometric cosine function.,Mathyon macros
"tan(angle_expr)",Mathyon General,Calculates the trigonometric tangent of an angle. Angle unit inferred/specified.,angle_expr (Number/AngleExpr): Angle value.,Number: Tangent of the angle.,`tan(degrees(45))` => 1. `tan(pi/4)` => 1.,Trigonometric tangent function.,Mathyon macros
"asin(value)",Mathyon General,Calculates the inverse sine (arcsin) of a value. Result in radians.,value (Number/Expr): Value between -1 and 1.,Number (Radians): Angle in radians whose sine is value.,`asin(0.5)` => pi/6 (approx 0.5236).,Inverse sine (arcsin), result in radians.,Mathyon macros
"acos(value)",Mathyon General,Calculates the inverse cosine (arccos) of a value. Result in radians.,value (Number/Expr): Value between -1 and 1.,Number (Radians): Angle in radians whose cosine is value.,`acos(0.5)` => pi/3 (approx 1.0472).,Inverse cosine (arccos), result in radians.,Mathyon macros
"atan(value)",Mathyon General,Calculates the inverse tangent (arctan) of a value. Result in radians.,value (Number/Expr): Any real number.,Number (Radians): Angle in radians whose tangent is value.,`atan(1)` => pi/4 (approx 0.7854).,Inverse tangent (arctan), result in radians.,Mathyon macros
"csc(angle_expr)",Mathyon General,Calculates the trigonometric cosecant (1/sin) of an angle. Angle unit inferred/specified.,angle_expr (Number/AngleExpr): Angle value.,Number: Cosecant of the angle.,`csc(degrees(30))` => 2.,Trigonometric cosecant function.,Mathyon macros
"sec(angle_expr)",Mathyon General,Calculates the trigonometric secant (1/cos) of an angle. Angle unit inferred/specified.,angle_expr (Number/AngleExpr): Angle value.,Number: Secant of the angle.,`sec(degrees(60))` => 2.,Trigonometric secant function.,Mathyon macros
"cot(angle_expr)",Mathyon General,Calculates the trigonometric cotangent (1/tan) of an angle. Angle unit inferred/specified.,angle_expr (Number/AngleExpr): Angle value.,Number: Cotangent of the angle.,`cot(degrees(45))` => 1.,Trigonometric cotangent function.,Mathyon macros
"cosec(angle_expr)",Mathyon General,Alias for `csc(angle_expr)`.,angle_expr (Number/AngleExpr): Angle value.,Number: Cosecant of the angle.,`cosec(degrees(30))` => 2.,Alias for `csc()`.,Mathyon macros
"degrees(value)",Mathyon General,"Tags a numerical value as being in degrees, for use with trig functions or angle conversions.",value (Number/Expr): The angle value in degrees.,AngleObject (Degrees): Value tagged as degrees, for internal use by other functions.,`sin(degrees(30))`. `deg_to_rad(degrees(30))`.,Specifies angle unit as degrees.,Mathyon macros
"radians(value)",Mathyon General,"Tags a numerical value as being in radians, for use with trig functions or angle conversions.",value (Number/Expr): The angle value in radians.,AngleObject (Radians): Value tagged as radians, for internal use by other functions.,`cos(radians(pi/3))`. `rad_to_deg(radians(pi))`.,Specifies angle unit as radians.,Mathyon macros
"degminsecs(deg, min [, secs])",Mathyon General,"Represents an angle in degrees, minutes, and optional seconds for display.",deg (Int): Degrees part; min (Int): Minutes part; secs (Int, Optional): Seconds part.,AngleObject/String: Formatted angle in DMS for display, e.g., 10°30' or 5°15'45".,`degminsecs(10,30)` displays 10°30'. `degminsecs(5,15,45)` displays 5°15'45".,Degree-Minute-Second angle representation for display.,Mathyon macros
"deg_to_rad(degree_val_expr)",Mathyon General,"Converts an angle value from degrees to radians. Input should ideally be tagged with `degrees()` or be a plain number interpreted as degrees.",degree_val_expr (AngleObject(Degrees)/Number): Angle in degrees (e.g., `degrees(180)` or just 180).,Number (Radians): Angle in radians.,`deg_to_rad(degrees(180))` => pi. `deg_to_rad(90)` => pi/2.,Degree to radian conversion.,Mathyon macros
"rad_to_deg(radian_val_expr [, dp])",Mathyon General,"Converts an angle value from radians to degrees, optionally rounded to 'dp' decimal places (default 4dp). Input should ideally be tagged with `radians()` or be a plain number interpreted as radians.",radian_val_expr (Number/AngleObject(Radians)): Angle in radians (e.g., `pi`); dp (Int, Optional): Decimal places for rounding. Default 4.,Number (Degrees): Angle in degrees.,`rad_to_deg(pi)` => 180.0000. `rad_to_deg(radians(pi/2), 2)` => 90.00.,Radian to degree conversion.,Mathyon macros
"cis(angle_expr)",Mathyon General,"Calculates cis(θ) = cos(θ) + i*sin(θ). Angle unit inferred/specified via `degrees()` or `radians()`.",angle_expr (Number/AngleExpr): Angle value θ.,ComplexNumber: Result of cos(θ) + i*sin(θ).,`cis(degrees(90))` => `0 + 1i` (or `Im`). `cis(pi)` => -1.,Complex exponential shorthand e^(iθ).,Mathyon macros
"nCr(n, r)",Mathyon General,"Calculates combinations 'n choose r'. Displays in nCr form.",n (Int): Total items; r (Int): Items to choose. n >= r >= 0.,Integer: Number of combinations. For display, often renders as C(n,r) or similar.,`nCr(5,2)` => 10. Displays as ⁵C₂ or C(5,2).,Combinations (order doesn't matter).,Mathyon macros
"nPr(n, r)",Mathyon General,"Calculates permutations 'n permute r'. Displays in nPr form.",n (Int): Total items; r (Int): Items to choose. n >= r >= 0.,Integer: Number of permutations. For display, often renders as P(n,r) or similar.,`nPr(5,2)` => 20. Displays as ⁵P₂ or P(5,2).,Permutations (order matters).,Mathyon macros
"binomial(n, r)",Mathyon General,"Calculates combinations 'n choose r'. Displays in parenthesis/binomial coefficient form (n over r).",n (Int): Total items; r (Int): Items to choose. n >= r >= 0.,Integer: Number of combinations. For display, often renders as (n r) vertically.,`binomial(5,2)` => 10. Displays as (5 over 2).,Binomial coefficient (same value as nCr), for display.,Mathyon macros
"prob(event_expr)",Mathyon General,Alias for `probability(event_expr)` for display of probability notation.,event_expr (Expr/String): Description of the event.,SymbolicProb: Displays as P(event_expr).,`prob(A)` => P(A).,Shorthand for `probability()` for display.,Mathyon macros
"probability(event_expr)",Mathyon General,"Displays probability notation P(event) for an event description.",event_expr (Expr/String): Description of the event (e.g., 'A', 'X=2').,SymbolicProb: Displays as P(event_expr).,`probability(""Head"")` => P(Head). `probability(X>5)` => P(X>5).,Probability notation for display.,Mathyon macros
"angle(ABC)",Mathyon General,"Represents a geometric angle, e.g., ∠ABC, for display or answer checking. Matches student input ABC or CBA.",points (String): Vertex sequence defining the angle (e.g., 'ABC', where B is the vertex).,AngleSymbol: Displays angle symbol, e.g., ∠ABC.,`angle(PQR)` displays as ∠PQR. Used for geometric problem display/answer checking.,Geometric angle representation.,Mathyon macros
"common(geom_entity)",Mathyon General,"States that a geometric entity is common, for use in geometry proofs display.",geom_entity (GeometricObject): The geometric entity (e.g., `angle(BOC)`, `interval(AB)`).,String: Statement like "BOC is common" for display.,`common(angle(BOC))` => "angle BOC is common" (or similar).,Used in geometry proofs display.,Mathyon macros
"congruent(geom_entity1, geom_entity2)",Mathyon General,"States that two geometric entities are congruent (e.g., ΔABC ≅ ΔDEF) for display.",geom_entity1 (GeometricObject): First entity; geom_entity2 (GeometricObject): Second entity.,String: Congruence statement with ≅ symbol for display.,`congruent(triangle(ABC), triangle(DEF))` => "ΔABC ≅ ΔDEF" (or similar).,Geometric congruence statement for display.,Mathyon macros
"parallel(geom_entity1, geom_entity2)",Mathyon General,"States that two geometric entities are parallel (e.g., AB || CD) for display.",geom_entity1 (Line/Interval): First entity; geom_entity2 (Line/Interval): Second entity.,String: Parallel statement with || symbol for display.,`parallel(interval(AB), interval(CD))` => "AB || CD" (or similar).,Geometric parallel statement for display.,Mathyon macros
"triangle(ABC)",Mathyon General,"Represents a geometric triangle, e.g., ΔABC, for display or answer checking.",points (String): Vertex sequence defining the triangle (e.g., 'ABC').,TriangleSymbol: Displays triangle symbol, e.g., ΔABC.,`triangle(PQR)` displays as ΔPQR. Used for geometric problem display/answer checking.,Geometric triangle representation.,Mathyon macros
"interval(AB)",Mathyon General,"Represents a geometric line interval AB, for display or answer checking. Matches student input AB or BA.",points (String): Endpoint sequence defining interval (e.g., 'AB').,IntervalSymbol: Displays interval notation (e.g., line over AB or just AB).,`interval(XY)` displays as line over XY or "segment XY". Used for geometry.,Geometric line interval representation.,Mathyon macros
"similar(geom_entity1, geom_entity2)",Mathyon General,"States that two geometric entities are similar (e.g., ΔABC ~ ΔDEF) for display.",geom_entity1 (GeometricObject): First entity; geom_entity2 (GeometricObject): Second entity.,String: Similarity statement with ~ symbol for display.,`similar(triangle(ABC), triangle(DEF))` => "ΔABC ~ ΔDEF" (or similar).,Geometric similarity statement for display.,Mathyon macros
"polygon(ABC...)",Mathyon General,"Represents a polygon with given vertices, e.g., Polygon ABCDE, for display.",points (String): Ordered vertex sequence (e.g., 'ABCDE').,PolygonSymbol: Representation of the polygon for display.,`polygon(ABCD)` displays "Polygon ABCD" or similar.,Geometric polygon representation for display.,Mathyon macros
"mean(data_list)",Mathyon General,Calculates the arithmetic mean (average) of a list of numbers.,data_list (List<Number>): List of numerical data.,Number: The mean of the data.,`mean(list(1,2,3,6))` => 3.,Statistical mean calculation.,Mathyon macros
"median(data_list)",Mathyon General,Calculates the median (middle value) of a list of numbers.,data_list (List<Number>): List of numerical data. List is typically sorted internally.,Number: The median of the data.,`median(list(1,2,3,4,5))` => 3. `median(list(1,2,3,4))` => 2.5.,Statistical median calculation.,Mathyon macros
"stdev(data_list)",Mathyon General,"Calculates the population standard deviation of a list of numbers.",data_list (List<Number>): List of numerical data.,Number: The population standard deviation.,`stdev(list(1,2,3,4,5))`. Ensure if sample stdev is needed, a different macro or option is used.,Statistical standard deviation (population).,Mathyon macros
"mode(data_list)",Mathyon General,"Finds the mode(s) (most frequent value(s)) of a list of numbers.",data_list (List<Number>): List of numerical data.,Number/List<Number>: The mode or list of modes if multimodal (system dependent).,`mode(list(1,2,2,3))` => 2. `mode(list(1,1,2,2,3))` => `[1,2]` (or first encountered if single value returned).,Statistical mode calculation.,Mathyon macros
"range(data_list)",Mathyon General,"Calculates the range (max - min) of a list of numbers.",data_list (List<Number>): List of numerical data.,Number: The range of the data.,`range(list(1,2,7,3))` => 6 (7-1).,Statistical range calculation.,Mathyon macros
"lim(var, approaches, expr)",Mathyon General,Alias for `limit(var, approaches, expr)` for calculus limit representation or evaluation.,var (Identifier): Variable of limit; approaches (Number/Infinity/Expr): Value var approaches; expr (MathExpr): Expression to evaluate limit of.,SymbolicLimit/Number: Limit notation or evaluated limit.,`lim(x, infinity, 1/x)` => 0 (or limit notation).,Shorthand for `limit()`.,Mathyon macros
"limit(var, approaches, expr)",Mathyon General,"Represents or evaluates the limit of an expression as a variable approaches a value.",var (Identifier): Variable of limit; approaches (Number/Infinity/Expr): Value var approaches; expr (MathExpr): Expression to evaluate limit of.,SymbolicLimit/Number: Limit notation (e.g., lim_{x->inf} 1/x) or the evaluated limit.,`limit(x, 0, sin(x)/x)` => 1 (or limit notation).,Calculus limit notation/evaluation.,Mathyon macros
"diff(y_expr, x_var)",Mathyon General,Alias for `differentiate(y_expr, x_var)` for calculus differentiation.,y_expr (MathExpr): Expression to differentiate; x_var (Identifier): Variable to differentiate with respect to.,SymbolicDerivative/MathExpr: Derivative expression. Displays as dy/dx or result.,`diff(x^2, x)` => 2x (or dy/dx notation).,Shorthand for `differentiate()`.,Mathyon macros
"differentiate(y_expr, x_var [, x_var2, ...])",Mathyon General,"Calculates the derivative of y_expr with respect to x_var. Higher derivatives if more x_vars given. Displays in dy/dx notation or as result.",y_expr (MathExpr): Expression to differentiate; x_var (Identifier): Variable to differentiate w.r.t; x_var2 (Identifier, Opt): For 2nd derivative w.r.t x_var2 (if same as x_var, d²y/dx²).,SymbolicDerivative/MathExpr: Derivative expression. Displays as dy/dx, d²y/dx², etc., or the resulting expression.,`differentiate(x^3, x)` => 3x². `differentiate(x^3, x, x)` => 6x.,Calculus differentiation.,Mathyon macros
"integral(expr, var)",Mathyon General,"Represents or evaluates the indefinite integral of expr with respect to var.",expr (MathExpr): Expression to integrate; var (Identifier): Variable of integration.,SymbolicIntegral/MathExpr: Indefinite integral (e.g., ∫x² dx = x³/3 + C). Constant C may or may not be added by system.,`integral(x^2, x)` => x³/3 (+ C if system adds it).,Indefinite integral representation/evaluation.,Mathyon macros
"integral(lower, upper, expr, var)",Mathyon General,"Represents or evaluates the definite integral of expr w.r.t var from lower to upper bounds.",lower (Number/Expr): Lower limit; upper (Number/Expr): Upper limit; expr (MathExpr): Expression to integrate; var (Identifier): Variable of integration.,SymbolicIntegral/Number: Definite integral notation or evaluated result.,`integral(0,1,x^2,x)` => 1/3 (or ∫ notation).,Definite integral representation/evaluation.,Mathyon macros
"definite(lower, upper, expr, var)" or "definite(var=lower, var=upper, expr, var)",Mathyon General,"Evaluates a definite integral and displays result as [F(upper) - F(lower)]-like notation before final value. Can show substitution variable for clarity.",lower/var=lower (Number/Expr): Lower limit; upper/var=upper (Number/Expr): Upper limit; expr (MathExpr): Integrand; var (Identifier): Integration variable.,FormattedEvaluation/Number: Displays evaluation step [F(b)-F(a)] then the numerical result.,`definite(0,1,x^2,x)` displays [x³/3]_0^1 then 1/3. `definite(x=0,x=1,x^2,x)` also valid.,Shows steps of definite integral evaluation for display.,Mathyon macros
"prime(f_expr, n_derivative)",Mathyon General,"Returns the n-th derivative of f_expr, displayed in prime notation (f', f'', f''').",f_expr (FunctionExpr/Identifier): Function or expression (e.g., `f(x)` or `f`); n_derivative (Int): Order of derivative (1 for f', 2 for f'').,SymbolicDerivative: Derivative in prime notation (e.g., f'(x), f'').,`prime(f(x),1)` => f'(x). `prime(g,2)` => g''.,Calculus derivative in prime notation for display.,Mathyon macros
"B(answer_value)",Mathyon General,"Returns an editable box for student input. If student requests a hint, 'answer_value' is shown as the correct content for that box.",answer_value (AnyType): The correct answer for this box, shown on hint.,EditableBoxObject: An interactive editable box for student input.,`<mathyon> solution = 5; </mathyon> Question: ... B(solution) ...`,Editable input field with hint answer reveal.,Mathyon macros
"editable(default_value)",Mathyon General,"Returns an editable box for student input, optionally pre-filled with 'default_value'.",default_value (AnyType, Optional): Value to pre-fill in the box.,EditableBoxObject: An interactive editable box for student input.,`editable()` for empty box. `editable(10)` for box pre-filled with 10.,General editable input field.,Mathyon macros
"editableangle()",Mathyon General,Returns an editable box specifically for angle input, often displayed next to an angle symbol (e.g., ∠).,N/A,EditableBoxObject (Angle): Box for angle input.,Question: ∠ABC = editableangle(),Specialized editable box for angles.,Mathyon macros
"editableop(val1, val2)",Mathyon General,"Displays `val1 [BOX] val2`, where BOX is an editable field for student to input a mathematical operator.",val1 (AnyType): Expression/value before the operator box; val2 (AnyType): Expression/value after the operator box.,FormattedExprWithBox: Displays expression with an operator input box.,`editableop(x+2, 34)` displays as `x+2 [BOX] 34`. Student inputs e.g. '+', '=', etc.,Editable box for students to input a mathematical operator.,Mathyon macros
"editabletriangle()",Mathyon General,Returns an editable box typically placed next to a triangle symbol (Δ), for student input related to the triangle (e.g., a label, a value).,N/A,EditableBoxObject (Triangle): Box near Δ symbol.,Question: Δ editabletriangle(),Editable box for triangle properties or labels.,Mathyon macros
"summation(var, low, high, expr)",Mathyon General,"Represents or evaluates a sum using Sigma notation: Σ_{var=low}^{high} expr.",var (Identifier): Summation index variable; low (Int/Expr): Lower limit of summation; high (Int/Expr): Upper limit of summation; expr (MathExpr): Expression to sum, typically involves 'var'.,SymbolicSum/Number: Sigma notation for display, or the evaluated sum.,`summation(i, 1, 3, i^2)` => 1² + 2² + 3² = 14 (or Σ notation).,Sigma notation for sums, for display or calculation.,Mathyon macros
"open_open_interval(start, end)",Mathyon General,"Represents an open interval (start, end), excluding endpoints, for display or use in set theory contexts.",start (Number/Expr): Start of interval; end (Number/Expr): End of interval.,IntervalObject: Represents (start, end).,`open_open_interval(1,4)` => (1,4).,Mathematical interval (exclusive start, exclusive end).,Mathyon macros
"open_closed_interval(start, end)",Mathyon General,"Represents an interval (start, end], excluding start, including end, for display or use in set theory contexts.",start (Number/Expr): Start of interval; end (Number/Expr): End of interval.,IntervalObject: Represents (start, end].,`open_closed_interval(2,5)` => (2,5].,Mathematical interval (exclusive start, inclusive end).,Mathyon macros
"closed_open_interval(start, end)",Mathyon General,"Represents an interval [start, end), including start, excluding end, for display or use in set theory contexts.",start (Number/Expr): Start of interval; end (Number/Expr): End of interval.,IntervalObject: Represents [start, end).,`closed_open_interval(3,6)` => [3,6).,Mathematical interval (inclusive start, exclusive end).,Mathyon macros
"closed_closed_interval(start, end)",Mathyon General,"Represents a closed interval [start, end], including both endpoints, for display or use in set theory contexts.",start (Number/Expr): Start of interval; end (Number/Expr): End of interval.,IntervalObject: Represents [start, end].,`closed_closed_interval(4,7)` => [4,7].,Mathematical interval (inclusive start, inclusive end).,Mathyon macros
"{el1, el2, ...} (Set Literal)",Mathyon General,"Represents a set containing the given unique elements. For single element set: `{el1,}` (trailing comma required).",el1, el2,... (AnyType): Elements of the set.,Set: An unordered set object.,`{1,2,3}`. `{1,}`. `{5.4, x}`.,Direct set notation. Nested sets NOT supported.,Mathyon macros
"variable = value (Assignment)",MathyonS,Assigns a 'value' (literal, result of macro) to a 'variable' for use in problem template setup.,variable (Identifier): Name of variable to assign; value (AnyType): Value or expression to assign.,Effect: Variable is assigned the computed value in the current MathyonS scope.,`<mathyon> x = 10; y = randint(1,5); </mathyon>`,Fundamental for variable setup at template level.,MathyonR_S
"var1, var2 = (val1, val2) (Multiple Assignment)",MathyonS,"Assigns multiple values to multiple variables simultaneously, if values are from a list/tuple-like structure (often from macros returning lists).",var1, var2,... (Identifier): Variables to assign; val1, val2,... (AnyType): Values in a tuple/list structure (e.g. from `randint(1,10,2)`).,Effect: Variables are assigned respective values from the collection.,`<mathyon> x,y = (1,2); pts = randint(1,10,2); p1,p2=pts; </mathyon>`,Assigns multiple variables from a collection in one step.,MathyonR_S
"randint(min, max [, n])",MathyonS,Generates random integer(s) within an inclusive range.,min (Int): Min value of range; max (Int): Max value of range; n (Int, Optional): Number of unique integers. Default 1.,Int or List<Int>: Single random integer or list of unique random integers.,`<mathyon> x=randint(1,10); L=randint(1,10,3); </mathyon>`,Core randomization macro for integer parameters.,MathyonR_S
"randpick(item1, item2, ...)",MathyonS,Randomly selects one item from the provided list of arguments.,item1, item2,... (AnyType): Comma-separated items to choose from.,AnyType: One randomly chosen item from the list.,`<mathyon> choice = randpick('A','B','C'); </mathyon>`,Random selection from a fixed set of options.,MathyonR_S
"randcoprime(min_val, max_val [, n_pairs])",MathyonS,"Returns a pair (or n_pairs of) coprime integers within [min_val, max_val]. NOTE: Original docs state works correctly for min_val=2, incorrectly for min_val > 2.",min_val (Int): Min value for range; max_val (Int): Max value for range; n_pairs (Int, Optional): Number of coprime pairs.,Pair<Int,Int> or List<Pair<Int,Int>>: Coprime integer pair(s).,`<mathyon> cp_pair = randcoprime(2,9); </mathyon>`,Generates coprime numbers. WARNING: Potential bug if min_val > 2.,MathyonR_S
"randprime(min_val, max_val [, n_primes])",MathyonS,Returns a random prime number (or n_primes of them) within an inclusive range.,min_val (Int): Min value of range; max_val (Int): Max value of range; n_primes (Int, Optional): Number of unique primes.,Int or List<Int>: Single random prime or list of unique random primes.,`<mathyon> p = randprime(2,20); </mathyon>`,Generates random prime numbers.,MathyonR_S
"shuffle(item1, item2, ...)",MathyonS,Returns a list containing all input items in a random order.,item1, item2,... (AnyType): Items to shuffle.,List: A new list with same items in random order.,`<mathyon> s_list = shuffle(1,2,3,'a'); </mathyon>`,Randomizes order of elements in a list.,MathyonR_S
"variable.equals(var_symbol, expression)",MathyonR,Defines algebraic equivalence for 'var_symbol' as 'expression' for answer checking in Algebraic subproblems.,var_symbol (Variable): Variable to define equivalence for (e.g., `y`); expression (MathExpr): Equivalent expression (e.g., `x^2-1`).,Effect: Configures algebraic equivalence checker for the subproblem. Student input can use `var_symbol` or its `expression` interchangeably if correct answer matches one.,`variable.equals(y, x^2-1)` (Student can use y or x^2-1).,Key for flexible algebraic answer checking; allows student to use defined intermediate variables.,MathyonR_S
"variable.recurrence(T_n, T_n_minus_1_expr)",MathyonR,"Defines T_n as a recurrence relation (e.g., T_n = T_(n-1) + d). T_1 (base case) must be defined via `variable.equals()`.",T_n (RecurrenceVar): LHS of recurrence, e.g., `T_n`; T_n_minus_1_expr (MathExpr): RHS involving previous term(s), e.g., `T_(n-1)+d`.,Effect: Defines recurrence for answer checking, allowing student answers in terms of the recurrence.,`<mathyon> variable.equals(T_1, 5); variable.recurrence(T_n, T_(n-1)+2); </mathyon>`,For problems involving recurrence relations, enables checking answers like `T_3` or general term.,MathyonR_S
"variable.secret_subs(v1, val1, v2, val2, ...)",MathyonR,"Substitutes variables (v1, v2) with specified float values (val1, val2) in both student input & correct answer, then compares the float results. Bypasses normal equivalence checking.",v1 (Var): Variable to substitute; val1 (Float): Floating point value for v1; v2 (Var, Opt): etc.,Effect: Forces float-based comparison after substitution. This is a specialized answer check.,`variable.secret_subs(x,1.24,y,2.23)`,WARNING: Crutch. Avoid if possible. Use for specific float comparison needs where standard equivalence is problematic.,MathyonR_S
"equation.add_solution(var1=val1, var2=val2, ...)",MathyonR,"Specifies a valid solution (set of variable assignments) for an Equation subproblem. Student input is considered valid if it's an equation that holds true after these substitutions (e.g., resulting in 0=0 or A=A).",var1=val1 (Assignment): e.g., `x=1`; var2=val2 (Assignment): e.g., `y=2`.,Effect: Configures solution checker for Equation subproblems. Student's equation must be satisfied by these values.,`equation.add_solution(x=1, y=2)` for equation `x+y=3` (student input `x+y=3` with this solution is correct).,For checking solutions to equations/systems of equations.,MathyonR_S
"equation.poly_roots(var=set(root1, root2, ...))",MathyonR,"Compares roots of student's polynomial input (in 'var') against a specified set of roots. Student input must be polynomial form like `ax^n + ... = 0`.",var (Variable): Variable of the polynomial (e.g., `x`); set(roots) (Set): Set of correct roots (e.g., `set(1,-1)`).,Effect: Configures root-based checking for Equation subproblems. Checks if student's polynomial has these roots.,`equation.poly_roots(x=set(1,-1))` for student input `x^2-1=0` or `k(x^2-1)=0`.,For checking polynomial roots. Student input format restricted.,MathyonR_S
"function.declare(f, x [, y, ...])",MathyonR,"Declares 'f' as a user-defined function of variable(s) x (and optionally y, ...). This makes f(x) or f(x,y) recognizable as a function call in Mathyon.",f (Identifier): Function name; x,y,... (Identifier): Independent variable(s) of the function.,Effect: Registers 'f' as a function symbol in the system, allowing its use in `function.equals` and in expressions.,`function.declare(f,x); function.declare(g,x,y);`,Enables use of custom functions with specified arity.,MathyonR_S
"function.equals(f, expression_in_vars)",MathyonR,"Sets the mathematical definition of a previously declared function 'f' using its declared variables. Used for evaluation/equivalence checking by the system.",f (Identifier): Declared function name; expression_in_vars (MathExpr): Defining expression using the function's declared variables (e.g., `x^2` if f was declared `f(x)`).,Effect: Defines the function's behavior for the system.,`function.declare(f,x); function.equals(f, x^2-1);` Now `f(2)` would evaluate to 3.,Specifies the formula or rule for a custom declared function.,MathyonR_S
"function.alias(f, g [, h, ...])",MathyonR,"Declares functions g, h, etc., as aliases for a previously declared function f. Aliased functions will be treated as equivalent to f in checking.",f (Identifier): Primary (already declared) function name; g, h,... (Identifier): Alias function names.,Effect: Aliased functions are treated as identical to f for equivalence purposes.,`function.declare(f,x); function.equals(f,x^2); function.alias(f, myFunc);` Now `myFunc(a)` is same as `f(a)`.,Allows multiple names to refer to the same underlying function definition.,MathyonR_S
"plot.point(x, y [, label] [, inclusive=True])",MathyonR,"Defines a point object at (x,y). Used as input for other plot macros or directly within a `<graphplot>` layer (e.g., `data-foreground-layer`) to render a visible point. Label is text. `inclusive=False` for open/hollow point.",x (Number): x-coordinate; y (Number): y-coordinate; label (String, Opt): Text label for point; inclusive (Bool, Opt): False for open circle. Default True.,PlotObject (Point): A point object definition. Rendered if included in a `<graphplot>` layer. Required by other plot macros needing point inputs.,`<mathyon> P1=plot.point(1,2,'A'); P2=plot.point(3,4); </mathyon> <graphplot data-foreground-layer=""set(P1,P2)""></graphplot>`,Fundamental plot element. Other plot macros expect `plot.point` objects, not `coord()` or tuples. Placed in `<graphplot>` layers for rendering.,MathyonR_S
"plot.line(P1, P2)",MathyonR,"Defines a plottable line passing through two point objects P1 and P2, for rendering in a `<graphplot>` layer.",P1 (PlotObject(Point)): First point object (must be output of `plot.point`); P2 (PlotObject(Point)): Second point object (must be output of `plot.point`).,PlotObject (Line): A line definition.,`<mathyon> pA=plot.point(0,0);pB=plot.point(1,1); L1=plot.line(pA,pB); </mathyon> <graphplot data-background-layer=""L1""></graphplot>`,Plots an infinite line through two `plot.point` objects when `L1` is used in a `<graphplot>` layer.,MathyonR_S
"plot.segment(P1, P2)",MathyonR,"Defines a plottable line segment between point objects P1 and P2, for rendering in a `<graphplot>` layer.",P1 (PlotObject(Point)): Start point object (from `plot.point`); P2 (PlotObject(Point)): End point object (from `plot.point`).,PlotObject (Segment): A line segment definition.,`<mathyon> pA=plot.point(0,0);pB=plot.point(1,1); S1=plot.segment(pA,pB); </mathyon> <graphplot data-foreground-layer=""S1""></graphplot>`,Plots a finite line segment between two `plot.point` objects when `S1` is used in a `<graphplot>` layer.,MathyonR_S
"plot.vector(P1, P2)",MathyonR,"Defines a plottable vector from point P1 to point P2 (arrow at P2), for rendering in a `<graphplot>` layer.",P1 (PlotObject(Point)): Tail of vector (point object from `plot.point`); P2 (PlotObject(Point)): Head of vector (point object from `plot.point`).,PlotObject (Vector): A vector definition.,`<mathyon> pT=plot.point(0,0);pH=plot.point(1,1); V1=plot.vector(pT,pH); </mathyon> <graphplot data-foreground-layer=""V1""></graphplot>`,Plots a directed line segment (vector) between two `plot.point` objects when `V1` is used in a `<graphplot>` layer.,MathyonR_S
"plot.sine(origin_point, quarter_point)",MathyonR,"Defines a plottable sine wave for rendering in a `<graphplot>` layer. 'origin_point' is a `plot.point` on curve. 'quarter_point' is a `plot.point` corresponding to peak/trough phase.",origin_point (PlotObject(Point)): A `plot.point` object the sine wave passes through; quarter_point (PlotObject(Point)): A `plot.point` object corresponding to peak/trough phase.,PlotObject (SineWave): A sine wave definition.,`<mathyon> S=plot.sine(plot.point(0,0),plot.point(pi/2,1)); </mathyon> <graphplot data-background-layer=""S""></graphplot>`,Plots a sine function based on two `plot.point` objects when `S` is used in a `<graphplot>` layer.,MathyonR_S
"plot.x_abs_line(vertex_point, other_point)",MathyonR,"Defines plottable y=a|x-h|+k for rendering in `<graphplot>` layer. 'vertex_point' is `plot.point` (h,k). 'other_point' is another `plot.point` on graph to define 'a'.",vertex_point (PlotObject(Point)): The `plot.point` object for vertex; other_point (PlotObject(Point)): Another `plot.point` object on the curve.,PlotObject (AbsValue): An absolute value function graph definition.,`<mathyon> A=plot.x_abs_line(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""A""></graphplot>`,Plots V-shaped absolute value graph from two `plot.point` objects when `A` used in a `<graphplot>` layer.,MathyonR_S
"plot.semicircle(centre_point, arc_midpoint)",MathyonR,"Defines plottable semicircle for rendering in `<graphplot>` layer. 'centre_point' is `plot.point` for diameter center. 'arc_midpoint' is `plot.point` on arc.",centre_point (PlotObject(Point)): `plot.point` for center of the diameter; arc_midpoint (PlotObject(Point)): `plot.point` on the arc, determines radius/orientation.,PlotObject (Semicircle): A semicircle definition.,`<mathyon> SC=plot.semicircle(plot.point(0,0),plot.point(0,1)); </mathyon> <graphplot data-background-layer=""SC""></graphplot>`,Plots a filled semicircle from two `plot.point` objects when `SC` used in a `<graphplot>` layer.,MathyonR_S
"plot.circle(centre_point, point_on_circle)",MathyonR,"Defines plottable circle for rendering in `<graphplot>` layer. 'centre_point' is `plot.point` for center. 'point_on_circle' is `plot.point` on circumference.",centre_point (PlotObject(Point)): `plot.point` for center; point_on_circle (PlotObject(Point)): `plot.point` on circumference.,PlotObject (Circle): A circle definition.,`<mathyon> C=plot.circle(plot.point(0,0),plot.point(1,0)); </mathyon> <graphplot data-foreground-layer=""C""></graphplot>`,Plots a full circle from two `plot.point` objects when `C` used in a `<graphplot>` layer.,MathyonR_S
"plot.ellipse(centre, p1_horiz_axis, p2_vert_axis)",MathyonR,"Defines plottable ellipse for rendering in `<graphplot>` layer. 'centre', 'p1_horiz_axis' (cx+a, cy), 'p2_vert_axis' (cx, cy+b) must all be `plot.point` objects.",centre (PlotObject(Point)): `plot.point` for ellipse center; p1_horiz_axis (PlotObject(Point)): `plot.point` like (center_x + horiz_radius, center_y); p2_vert_axis (PlotObject(Point)): `plot.point` like (center_x, center_y + vert_radius).,PlotObject (Ellipse): An ellipse definition.,`<mathyon> E=plot.ellipse(plot.point(0,0),plot.point(2,0),plot.point(0,1)); </mathyon> <graphplot data-foreground-layer=""E""></graphplot>`,Plots an axis-aligned ellipse from three `plot.point` objects when `E` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_parabola(vertex_point, other_point)",MathyonR,"Defines plottable vertical parabola y=a(x-h)²+k for rendering in `<graphplot>` layer. 'vertex_point' & 'other_point' must be `plot.point` objects.",vertex_point (PlotObject(Point)): `plot.point` for vertex; other_point (PlotObject(Point)): Another `plot.point` on the curve.,PlotObject (Parabola): A vertical parabola definition.,`<mathyon> P=plot.x_parabola(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""P""></graphplot>`,Plots a vertical (y=...) parabola from two `plot.point` objects when `P` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_parabola_locus(focus_point, directrix_point)",MathyonR,"Defines plottable vertical parabola for rendering in `<graphplot>` layer by `plot.point` objects 'focus_point' and 'directrix_point'. Directrix: y=directrix_point.y.",focus_point (PlotObject(Point)): `plot.point` for focus; directrix_point (PlotObject(Point)): `plot.point` on directrix line (its y-coord defines directrix y=c).,PlotObject (Parabola): A vertical parabola definition by focus-directrix.,`<mathyon> P=plot.x_parabola_locus(plot.point(0,1),plot.point(0,-1)); </mathyon> <graphplot data-background-layer=""P""></graphplot>`,Plots parabola from focus and directrix `plot.point` objects when `P` used in a `<graphplot>` layer.,MathyonR_S
"plot.y_parabola(vertex_point, other_point)",MathyonR,"Defines plottable horizontal parabola x=a(y-k)²+h for rendering in `<graphplot>` layer. 'vertex_point' & 'other_point' must be `plot.point` objects.",vertex_point (PlotObject(Point)): `plot.point` for vertex; other_point (PlotObject(Point)): Another `plot.point` on the curve.,PlotObject (Parabola): A horizontal parabola definition.,`<mathyon> P=plot.y_parabola(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""P""></graphplot>`,Plots a horizontal (x=...) parabola from two `plot.point` objects when `P` used in a `<graphplot>` layer.,MathyonR_S
"plot.y_parabola_locus(focus_point, directrix_point)",MathyonR,"Defines plottable horizontal parabola for rendering in `<graphplot>` layer by `plot.point` objects 'focus_point' and 'directrix_point'. Directrix: x=directrix_point.x.",focus_point (PlotObject(Point)): `plot.point` for focus; directrix_point (PlotObject(Point)): `plot.point` on directrix line (its x-coord defines directrix x=c).,PlotObject (Parabola): A horizontal parabola definition by focus-directrix.,`<mathyon> P=plot.y_parabola_locus(plot.point(1,0),plot.point(-1,0)); </mathyon> <graphplot data-background-layer=""P""></graphplot>`,Plots horizontal parabola from focus and directrix `plot.point` objects when `P` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_eccentric_conic_locus(centre, focus, directrix_point)",MathyonR,"Defines plottable horizontal ellipse/hyperbola for rendering in `<graphplot>` layer. All 3 args must be `plot.point` objects & share same Y-coord. 'centre', 'focus', 'directrix_point' (x-coord defines vertical directrix x=c).",centre (PlotObject(Point)): `plot.point` for center; focus (PlotObject(Point)): `plot.point` for focus; directrix_point (PlotObject(Point)): `plot.point` on directrix (x=c). All must have same y-coord.,PlotObject (Conic): Ellipse or hyperbola definition.,`<mathyon> C=plot.point(0,0);F=plot.point(1,0);D=plot.point(2,0); E=plot.x_eccentric_conic_locus(C,F,D); </mathyon> <graphplot data-foreground-layer=""E""></graphplot>`.,Plots conic from three `plot.point` objects (horizontal major axis) when `E` used in a `<graphplot>` layer.,MathyonR_S
"plot.y_eccentric_conic_locus(centre, focus, directrix_point)",MathyonR,"Defines plottable vertical ellipse/hyperbola for rendering in `<graphplot>` layer. All 3 args must be `plot.point` objects & share same X-coord. 'centre', 'focus', 'directrix_point' (y-coord defines horizontal directrix y=c).",centre (PlotObject(Point)): `plot.point` for center; focus (PlotObject(Point)): `plot.point` for focus; directrix_point (PlotObject(Point)): `plot.point` on directrix (y=c). All must have same x-coord.,PlotObject (Conic): Ellipse or hyperbola definition.,`<mathyon> C=plot.point(0,0);F=plot.point(0,1);D=plot.point(0,2); E=plot.y_eccentric_conic_locus(C,F,D); </mathyon> <graphplot data-foreground-layer=""E""></graphplot>`.,Plots conic from three `plot.point` objects (vertical major axis) when `E` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_sqrt(zero_point, other_point)",MathyonR,"Defines plottable y=a*sqrt(x-h)+k or y=a*sqrt(-(x-h))+k for rendering in `<graphplot>` layer. 'zero_point' & 'other_point' must be `plot.point` objects.",zero_point (PlotObject(Point)): `plot.point` for start of sqrt curve (h,k); other_point (PlotObject(Point)): Another `plot.point` on the curve.,PlotObject (SqrtCurve): A square root function graph definition.,`<mathyon> SQ=plot.x_sqrt(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""SQ""></graphplot>` for y=sqrt(x).,Plots y=... square root functions from two `plot.point` objects when `SQ` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_cbrt(zero_point, other_point)",MathyonR,"Defines plottable y=a*cbrt(x-h)+k for rendering in `<graphplot>` layer. 'zero_point' (inflection) & 'other_point' must be `plot.point` objects.",zero_point (PlotObject(Point)): `plot.point` for inflection point (h,k); other_point (PlotObject(Point)): Another `plot.point` on the curve.,PlotObject (CbrtCurve): A cube root function graph definition.,`<mathyon> CB=plot.x_cbrt(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""CB""></graphplot>` for y=cbrt(x).,Plots y=... cube root functions from two `plot.point` objects when `CB` used in a `<graphplot>` layer.,MathyonR_S
"plot.hyperbola(asymptote_intersection_point, other_point)",MathyonR,"Defines plottable y=a/(x-h)+k or x=a/(y-k)+h for rendering in `<graphplot>` layer. 'asymptote_intersection_point' & 'other_point' must be `plot.point` objects.",asymptote_intersection_point (PlotObject(Point)): `plot.point` for center where asymptotes cross (h,k); other_point (PlotObject(Point)): `plot.point` on one branch of hyperbola.,PlotObject (Hyperbola): A rectangular hyperbola definition.,`<mathyon> H=plot.hyperbola(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""H""></graphplot>` for y=1/x.,Plots rectangular hyperbolas from two `plot.point` objects when `H` used in a `<graphplot>` layer.,MathyonR_S
"plot.x_cubic(centre_inflection_point, other_point)",MathyonR,"Defines plottable y=a(x-h)³+k for rendering in `<graphplot>` layer. 'centre_inflection_point' & 'other_point' must be `plot.point` objects.",centre_inflection_point (PlotObject(Point)): `plot.point` for inflection point (h,k); other_point (PlotObject(Point)): Another `plot.point` on the curve.,PlotObject (CubicCurve): A cubic function graph definition.,`<mathyon> C=plot.x_cubic(plot.point(0,0),plot.point(1,1)); </mathyon> <graphplot data-foreground-layer=""C""></graphplot>` for y=x³.,Plots y=... cubic functions from two `plot.point` objects when `C` used in a `<graphplot>` layer.,MathyonR_S
"plot.polynomial(P1, P2, P3, ...)",MathyonR,"Defines plottable polynomial of degree n-1 passing through n specified `plot.point` objects, for rendering in `<graphplot>` layer.",P1, P2, P3,... (PlotObject(Point)): Sequence of `plot.point` objects the polynomial must pass through.,PlotObject (Polynomial): A polynomial function graph definition.,`<mathyon> p1=plot.point(-1,0);p2=plot.point(0,-1);p3=plot.point(1,0); PL=plot.polynomial(p1,p2,p3); </mathyon> <graphplot data-background-layer=""PL""></graphplot>` for y=x²-1.,Plots a polynomial through given `plot.point` objects when `PL` used in a `<graphplot>` layer.,MathyonR_S
"plot.polygon(P1, P2, P3, ...)",MathyonR,"Defines plottable polygon connecting n specified `plot.point` vertices in order, for rendering in `<graphplot>` layer.",P1, P2, P3,... (PlotObject(Point)): Ordered sequence of `plot.point` objects for vertices.,PlotObject (Polygon): A polygon shape definition.,`<mathyon> p1=plot.point(0,0);p2=plot.point(1,0);p3=plot.point(0,1); PG=plot.polygon(p1,p2,p3); </mathyon> <graphplot data-foreground-layer=""PG""></graphplot>` for a triangle.,Plots a polygon with given `plot.point` vertices when `PG` used in a `<graphplot>` layer.,MathyonR_S
"plot.piecewise(element, domain_start, domain_end)",MathyonR,"Defines plottable 'element' (PlotObject like line, x_sqrt) only within domain [domain_start, domain_end) for rendering in `<graphplot>` layer. Use `inclusive=False` on endpoint `plot.point` for open ends of interval.",element (PlotObject): The plot element definition (e.g., `plot.line(...)`); domain_start (Number/'-infinity'): Start of domain for this piece; domain_end (Number/'infinity'): End of domain for this piece.,PlotObject (PiecewiseElement): A segment of the element definition.,`<mathyon> pA=plot.point(0,0);pB=plot.point(3,3); L=plot.line(pA,pB); PW=plot.piecewise(L,-infinity,2); </mathyon> <graphplot data-background-layer=""PW""></graphplot>` for line y=x on x<2.,Plots part of a function over a specific domain interval when `PW` used in a `<graphplot>` layer.,MathyonR_S
"plot.inequality(element, type_str)",MathyonR,"Defines plottable inequality region (e.g., y >= f(x)) for rendering in `<graphplot>` layer. 'element' (PlotObject) is boundary. 'type_str' is '>=', '<=', '>', '<'.",element (PlotObject): The boundary curve/line definition; type_str (String): Inequality type ('>=', '<=', '>', '<').,PlotObject (InequalityRegion): Shaded region definition representing the inequality.,`<mathyon> pA=plot.point(0,0);pB=plot.point(1,1); L=plot.line(pA,pB); IQ=plot.inequality(L,'>='); </mathyon> <graphplot data-background-layer=""IQ""></graphplot>` for y >= x.,Plots a shaded region for an inequality when `IQ` used in a `<graphplot>` layer.,MathyonR_S
"plot.intersection(inequality_plot1, inequality_plot2)",MathyonR,"Defines the intersection (AND) plot of two inequality region PlotObjects, for rendering in `<graphplot>` layer.",inequality_plot1 (PlotObject(InequalityRegion)): First inequality plot definition; inequality_plot2 (PlotObject(InequalityRegion)): Second inequality plot definition.,PlotObject (InequalityRegion): The common shaded area definition.,`<mathyon> IQ1=plot.inequality(L1,'>'); IQ2=plot.inequality(L2,'<'); PIQ=plot.intersection(IQ1,IQ2); </mathyon> <graphplot data-background-layer=""PIQ""></graphplot>`.,Plots logical AND of two inequality regions when `PIQ` used in a `<graphplot>` layer.,MathyonR_S
"plot.union(inequality_plot1, inequality_plot2)",MathyonR,"Defines the union (OR) plot of two inequality region PlotObjects, for rendering in `<graphplot>` layer.",inequality_plot1 (PlotObject(InequalityRegion)): First inequality plot definition; inequality_plot2 (PlotObject(InequalityRegion)): Second inequality plot definition.,PlotObject (InequalityRegion): The total shaded area definition from both.,`<mathyon> IQ1=plot.inequality(L1,'>'); IQ2=plot.inequality(L2,'<'); PUQ=plot.union(IQ1,IQ2); </mathyon> <graphplot data-background-layer=""PUQ""></graphplot>`.,Plots logical OR of two inequality regions when `PUQ` used in a `<graphplot>` layer.,MathyonR_S
"plot.function(expression_of_x)",MathyonR,"Defines a non-interactive plot of a specified function f(x) for rendering in `<graphplot>` layer. Variable in expression must be 'x'.",expression_of_x (MathExpr): An expression in terms of 'x' (e.g., `x^2`, `sin(x)`).,PlotObject (FunctionPlot): A non-interactive graph definition of the function.,`<mathyon> PF=plot.function(x^2-3*x+2); </mathyon> <graphplot data-background-layer=""PF""></graphplot>`.,Directly plots f(x) without defining points, when `PF` used in a `<graphplot>` layer.,MathyonR_S
"plot.tangent(P1_inflection, P2_on_curve, P3_asymptote_guide)",MathyonR,"Defines plottable tangent curve for rendering in `<graphplot>` layer. P1 is inflection `plot.point`. P3 (`plot.point` on asymptote, x-coord defines asymptote if vertical) helps define period/stretch. P2 is any other `plot.point` on curve.",P1_inflection (PlotObject(Point)): `plot.point` for inflection; P2_on_curve (PlotObject(Point)): Another `plot.point` on the curve; P3_asymptote_guide (PlotObject(Point)): `plot.point` whose x-coord (if vertical tan) or y-coord (if horizontal cotan-like) defines position of nearest asymptote to P1.,PlotObject (TangentCurve): A tangent function graph definition.,`<mathyon> P1=plot.point(0,0);P2=plot.point(pi/4,1);P3=plot.point(pi/2,0); PT=plot.tangent(P1,P2,P3); </mathyon> <graphplot data-background-layer=""PT""></graphplot>` for y=tan(x).,Plots a tangent function branch from `plot.point` objects when `PT` used in a `<graphplot>` layer.,MathyonR_S
"plot.cosecant(P1_symmetry_center, P2_local_max_min)",MathyonR,"Defines plottable cosecant curve for rendering in `<graphplot>` layer. P1 is `plot.point` for center of symmetry. P2 is `plot.point` for nearest local max/min.",P1_symmetry_center (PlotObject(Point)): `plot.point` for symmetry center; P2_local_max_min (PlotObject(Point)): `plot.point` for nearest local extremum.,PlotObject (CosecantCurve): A cosecant function graph definition.,`<mathyon> P1=plot.point(0,0);P2=plot.point(pi/2,1); PCS=plot.cosecant(P1,P2); </mathyon> <graphplot data-background-layer=""PCS""></graphplot>` for y=csc(x).,Plots a cosecant function from `plot.point` objects when `PCS` used in a `<graphplot>` layer.,MathyonR_S
"plot.log(P1_on_asymptote, P2_on_curve, P3_on_curve)",MathyonR,"Defines plottable log curve y=A log_b(x-h)+k for rendering in `<graphplot>` layer. P1 (`plot.point`, x-coord defines vertical asymptote x=h). P2, P3 are two distinct `plot.point` objects on curve.",P1_on_asymptote (PlotObject(Point)): `plot.point` on vertical asymptote (its x-coord defines x=h); P2_on_curve (PlotObject(Point)): First `plot.point` on log curve; P3_on_curve (PlotObject(Point)): Second `plot.point` on log curve.,PlotObject (LogCurve): A logarithmic function graph definition.,`<mathyon> P1=plot.point(0,5);P2=plot.point(1,0);P3=plot.point(Exp,1); PLG=plot.log(P1,P2,P3); </mathyon> <graphplot data-background-layer=""PLG""></graphplot>` for y=ln(x).,Plots a logarithmic function from `plot.point` objects when `PLG` used in a `<graphplot>` layer.,MathyonR_S
"plot.segment(plot.point(x,y), plot.point(x,y, 'label')) (Label Kludge)",MathyonR,"Kludge: Uses a zero-length segment to effectively place a 'label' at an arbitrary (x,y) coordinate within a `<graphplot>` layer.",plot.point(x,y) (PlotObject(Point)): `plot.point` for start of zero-length segment; plot.point(x,y, 'label') (PlotObject(Point)): `plot.point` for end of segment, with label attribute.,PlotObject (Segment with Label): Effectively a labeled point definition for rendering in a layer.,`<mathyon> KL=plot.segment(plot.point(2,3),plot.point(2,3,'My Label')); </mathyon> <graphplot data-foreground-layer=""KL""></graphplot>`.,Workaround to label an arbitrary coordinate when `KL` used in a `<graphplot>` layer.,MathyonR_S
"plot.intersection(plot.inequality(P,'<'), plot.inequality(P,'>')) (Dotted Line Kludge)",MathyonR,"Kludge: Renders a curve P (PlotObject) as a dotted line in `<graphplot>` layer by plotting the (empty) intersection of P < region and P > region, which styles P as dotted.",P (PlotObject line/curve): The curve definition to make dotted.,PlotObject (DottedLine): Curve P rendered as a dotted line.,`<mathyon> pA=plot.point(0,0);pB=plot.point(1,1); myL=plot.line(pA,pB); KD=plot.intersection(plot.inequality(myL,'<'),plot.inequality(myL,'>')); </mathyon> <graphplot data-foreground-layer=""KD""></graphplot>`.,Workaround to draw dotted lines (e.g., asymptotes) when `KD` used in a `<graphplot>` layer.,MathyonR_S